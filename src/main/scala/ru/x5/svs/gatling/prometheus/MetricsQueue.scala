package ru.x5.svs.gatling.prometheus

import java.util.concurrent.ConcurrentLinkedQueue
import java.util.concurrent.atomic.AtomicLong
import org.slf4j.LoggerFactory
import scala.collection.mutable

/**
 * –û—á–µ—Ä–µ–¥—å –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø–µ—Ä–µ–¥ –±–∞—Ç—á–µ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π
 * –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∑–¥–µ—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
 */
object MetricsQueue {
  private val logger = LoggerFactory.getLogger(classOf[MetricsQueue.type])
  
  // –û—á–µ—Ä–µ–¥—å –¥–ª—è HTTP –º–µ—Ç—Ä–∏–∫ (–∑–∞–ø—Ä–æ—Å—ã, –æ—à–∏–±–∫–∏, durations)
  private val httpMetricsQueue = new ConcurrentLinkedQueue[HttpMetric]()
  
  // THREAD-SAFE —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
  private val httpRequestCounters = new java.util.concurrent.ConcurrentHashMap[String, AtomicLong]()
  private val httpErrorCounters = new java.util.concurrent.ConcurrentHashMap[String, AtomicLong]()
  private val httpDurations = new java.util.concurrent.ConcurrentHashMap[String, java.util.concurrent.CopyOnWriteArrayList[Long]]()
  
  // THREAD-SAFE —Å—á–µ—Ç—á–∏–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  private val virtualUsersCount = new java.util.concurrent.atomic.AtomicInteger(0)
  private val peakVirtualUsersCount = new java.util.concurrent.atomic.AtomicInteger(0)
  
  // THREAD-SAFE –º–µ—Ç—Ä–∏–∫–∏ –∏—Ç–µ—Ä–∞—Ü–∏–π
  private val iterationDurations = new java.util.concurrent.ConcurrentHashMap[String, java.util.concurrent.CopyOnWriteArrayList[Long]]()
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è memory leaks
  private val MAX_DURATIONS_PER_KEY = 1000
  private val MAX_KEYS = 10000
  
  /**
   * –î–æ–±–∞–≤–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
   */
  def addHttpRequest(scenario: String, requestName: String, method: String, status: String, responseTime: Long): Unit = {
    val key = s"$scenario|$requestName|$method|$status"
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    httpMetricsQueue.offer(HttpMetric("request", scenario, requestName, method, status, responseTime))
    
    // THREAD-SAFE –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
    httpRequestCounters.computeIfAbsent(key, _ => new AtomicLong(0)).incrementAndGet()
    
    // THREAD-SAFE –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ duration —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
    val durations = httpDurations.computeIfAbsent(key, _ => new java.util.concurrent.CopyOnWriteArrayList[Long]())
    if (durations.size() < MAX_DURATIONS_PER_KEY) {
      durations.add(responseTime)
    } else {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ (THREAD-SAFE)
      if (durations.size() > 0) {
        durations.remove(0)
      }
      durations.add(responseTime)
    }
    
    logger.debug(s"üìä Added HTTP request to queue: $key, responseTime=${responseTime}ms")
  }
  
  /**
   * –î–æ–±–∞–≤–∏—Ç—å HTTP –æ—à–∏–±–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
   */
  def addHttpError(scenario: String, requestName: String, method: String, status: String, errorMessage: String): Unit = {
    val key = s"$scenario|$requestName|$method|$status|$errorMessage"
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    httpMetricsQueue.offer(HttpMetric("error", scenario, requestName, method, status, 0L, errorMessage))
    
    // THREAD-SAFE –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
    httpErrorCounters.computeIfAbsent(key, _ => new AtomicLong(0)).incrementAndGet()
    
    logger.debug(s"üìä Added HTTP error to queue: $key, error=$errorMessage")
  }
  
  /**
   * –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫—É –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
   */
  def addIterationDuration(scenario: String, duration: Long): Unit = {
    // THREAD-SAFE –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
    val durations = iterationDurations.computeIfAbsent(scenario, _ => new java.util.concurrent.CopyOnWriteArrayList[Long]())
    if (durations.size() < MAX_DURATIONS_PER_KEY) {
      durations.add(duration)
    } else {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ (THREAD-SAFE)
      if (durations.size() > 0) {
        durations.remove(0)
      }
      durations.add(duration)
    }
    
    logger.debug(s"üìä Added iteration duration: $scenario, duration=${duration}ms")
  }
  
  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  def updateVirtualUsersCount(count: Int): Unit = {
    virtualUsersCount.set(count)
    // THREAD-SAFE –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∏–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    var currentPeak = peakVirtualUsersCount.get()
    while (count > currentPeak && !peakVirtualUsersCount.compareAndSet(currentPeak, count)) {
      currentPeak = peakVirtualUsersCount.get()
    }
    logger.info(s"VU_COUNT_UPDATED: current=$count peak=${peakVirtualUsersCount.get()}")
  }
  
  /**
   * –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ VU)
   */
  def incrementVirtualUsers(): Unit = {
    val newCount = virtualUsersCount.incrementAndGet()
    // THREAD-SAFE –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∏–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    var currentPeak = peakVirtualUsersCount.get()
    while (newCount > currentPeak && !peakVirtualUsersCount.compareAndSet(currentPeak, newCount)) {
      currentPeak = peakVirtualUsersCount.get()
    }
    logger.debug(s"VU_START: current=$newCount peak=${peakVirtualUsersCount.get()}")
  }
  
  /**
   * –£–º–µ–Ω—å—à–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ VU)
   */
  def decrementVirtualUsers(): Unit = {
    val newCount = virtualUsersCount.decrementAndGet()
    if (newCount < 0) {
      virtualUsersCount.set(0) // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    }
    logger.debug(s"VU_END: current=${virtualUsersCount.get()} peak=${peakVirtualUsersCount.get()}")
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  def getVirtualUsersCount(): Int = virtualUsersCount.get()
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–∏–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  def getPeakVirtualUsersCount(): Int = peakVirtualUsersCount.get()
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  def pollAllMetrics(): Seq[HttpMetric] = {
    val metrics = mutable.ListBuffer[HttpMetric]()
    var metric = httpMetricsQueue.poll()
    while (metric != null) {
      metrics += metric
      metric = httpMetricsQueue.poll()
    }
    logger.debug(s"üìä Polled ${metrics.length} metrics from queue")
    metrics.toSeq
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  def getHttpRequestCounters(): Map[String, Long] = {
    import scala.jdk.CollectionConverters._
    httpRequestCounters.asScala.map { case (key, counter) => key -> counter.get() }.toMap
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ HTTP –æ—à–∏–±–æ–∫
   */
  def getHttpErrorCounters(): Map[String, Long] = {
    import scala.jdk.CollectionConverters._
    httpErrorCounters.asScala.map { case (key, counter) => key -> counter.get() }.toMap
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å durations –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  def getHttpDurations(): Map[String, Seq[Long]] = {
    import scala.jdk.CollectionConverters._
    httpDurations.asScala.map { case (key, durations) => key -> durations.asScala.toSeq }.toMap
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å durations –∏—Ç–µ—Ä–∞—Ü–∏–π
   */
  def getIterationDurations(): Map[String, Seq[Long]] = {
    import scala.jdk.CollectionConverters._
    iterationDurations.asScala.map { case (key, durations) => key -> durations.asScala.toSeq }.toMap
  }
  
  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å (–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏)
   */
  def clearQueue(): Unit = {
    val cleared = httpMetricsQueue.size()
    httpMetricsQueue.clear()
    logger.debug(s"üìä Cleared $cleared metrics from queue (accumulative counters preserved)")
  }
  
  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è memory leaks)
   */
  def clearAllMetrics(): Unit = {
    httpMetricsQueue.clear()
    httpRequestCounters.clear()
    httpErrorCounters.clear()
    httpDurations.clear()
    iterationDurations.clear()
    virtualUsersCount.set(0)
    peakVirtualUsersCount.set(0)
    logger.info(s"üßπ Cleared all metrics to prevent memory leaks")
  }
  
  /**
   * –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–µ—Ç—Ä–∏–∫ (–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ Java)
   */
  def clearAllMetricsStatic(): Unit = {
    clearAllMetrics()
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
   */
  def queueSize(): Int = httpMetricsQueue.size()
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
   */
  def getQueueStats(): QueueStats = {
    QueueStats(
      queueSize = httpMetricsQueue.size(),
      httpRequestCount = httpRequestCounters.size,
      httpErrorCount = httpErrorCounters.size,
      virtualUsersCount = virtualUsersCount.get(),
      iterationScenarios = iterationDurations.size
    )
  }
}

/**
 * –ú–æ–¥–µ–ª—å HTTP –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
 */
case class HttpMetric(
  metricType: String, // "request" –∏–ª–∏ "error"
  scenario: String,
  requestName: String,
  method: String,
  status: String,
  responseTime: Long,
  errorMessage: String = ""
)

/**
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
 */
case class QueueStats(
  queueSize: Int,
  httpRequestCount: Int,
  httpErrorCount: Int,
  virtualUsersCount: Int,
  iterationScenarios: Int
)
